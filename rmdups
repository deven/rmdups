#!/usr/bin/perl

# Initialize Perl modules.
use File::Spec;
use Getopt::Std;
use Digest::MD5;

# Subroutine prototypes.
sub scan (@);
sub remove_duplicates (@);
sub remove_empties (@);
sub dir_entries ($$);
sub device ($);
sub inode ($);
sub size ($);
sub md5 ($);
sub identical ($$);

# Program version.
$VERSION = "0.4";

# Hardcoded parameters.
$block_size = 32768;

# Setup usage and version messages.
($program = $0) =~ s/^.*\///;
$usage = "Usage: $program [-c] [-l] [-n] [-s] [-v] [-x] source ... -- target ...\n";
$version = "$program version $VERSION\n";

# Don't buffer output.
$| = 1;

# Use standard --help and --version switches.
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Custom --version message.
sub VERSION_MESSAGE {
   print $version;
}

# Custom --help message.
sub HELP_MESSAGE {
   print <<EOF;

$usage
Scans files in source list (recursively traversing directories), then walks the
target list, removing any duplicate files found anywhere in the source list.
Sources may appear in the target list; no file will be removed as a duplicate
of itself, as determined by a device/inode check.  Pathnames of identified
duplicates are output to standard output, unless -v is used for verbose output.

Options:

   -c  Cleanup by removing broken links and empty files/directories.
   -l  Replace duplicate files with hard links or symbolic links to original.
   -n  Dry run; do not actually make any changes to the filesystem.
   -s  Replace duplicate files with symbolic links to original.
   -v  Verbose; output more information to standard error during processing.
   -x  Only check files on the same filesystem as duplicates.
EOF
}

# Parse the command-line switches.
our($opt_l, $opt_n, $opt_s, $opt_v, $opt_x);
getopts("lnsvx");

# Remove trailing slashes from filenames.
map {s/\/+$//;} @ARGV;

# Determine the source files.
while ($source = shift @ARGV) {
   last if $source eq "--";
   push @sources, $source;
}

# Abort unless both sources and targets were identified.
die $usage unless @sources and @ARGV;

# Scan the source file(s).
scan @sources;

# Remove duplicates among remaining files.
remove_duplicates @ARGV;

# Recursive subroutine to scan and remember source files.
sub scan (@) {
   my @files = @_;

   # Loop across the source files.
   FILE: foreach my $file (@files) {
      # Check the type of the file.
      if (-l $file) {
         # Verify that the link is readable.
         readlink $file or warn "$file: $!\n";
      } elsif (-d _) {
         # Recursively scan subdirectories.
         scan dir_entries "source", $file;
      } elsif ($size = size $file) {
         # Skip duplicates of previously-scanned source files.
         foreach $source (@{$sources{$size}}) {
            next FILE if identical $file, $source;
         }

         # Remember key information about source files.
         push @{$sources{$size}}, $file;
      }
   }
}

# Recursive subroutine to remove duplicates of source files.
sub remove_duplicates (@) {
   my @files = @_;

   # Loop across the target files.
   FILE: foreach my $file (@files) {
      # Check the type of the file.
      if (-l $file) {
         # Verify that the link is readable.
         readlink $file or warn "$file: $!\n";
         # Should symlinks be removed if the relative path or basename matches?
      } elsif (-d _) {
         # Recursively scan subdirectories.
         remove_duplicates dir_entries "target", $file;
      } elsif ($size = size $file) {
         # Skip duplicates of previously-scanned source files.
         foreach $source (@{$sources{$size}}) {
            # Check if this file is a duplicate of the source file.
            next unless identical($file, $source) eq DUPLICATE;

            # Check for verbose mode.
            if ($opt_v) {
               # Check for dry-run mode.
               if ($opt_n) {
                  # Check for linking options.
                  if ($opt_s) {
                     print "Would symlink \"$file\" as duplicate of \"$source\"...\n";
                  } elsif ($opt_l) {
                     print "Would link \"$file\" as duplicate of \"$source\"...\n";
                  } else {
                     print "Would remove \"$file\" as duplicate of \"$source\"...\n";
                  }
               } else {
                  # Print informational message.
                  print "Removing \"$file\" as duplicate of \"$source\"...\n";
               }
            } else {
               # Not in verbose mode; print only the duplicate filename.
               print "$file\n";
            }

            # Skip to the next target file if in dry-run mode.
            next FILE if $opt_n;

            # Remove the duplicate file.
            unlink $file or warn "$file: $!\n";

            # Check if a hard link is wanted.
            if ($opt_l and not $opt_s) {
               # Print information message if in verbose mode.
               print "Hard linking \"$file\" to \"$source\"...\n" if $opt_v;

               # Skip to the next target file if a link is successfully created.
               next FILE if link $source, $file;

               # Print information message if in verbose mode.
               print "Hard link failed; attempting symbolic link...\n" if $opt_v;
            }

            # Check if a symlink is wanted.
            if ($opt_l or $opt_s) {
               # Determine the absolute pathnames of source and target files.
               my $abs_source = File::Spec->rel2abs($source);
               my $abs_file = File::Spec->rel2abs($file);

               # Determine the base directory of the target file.
               my $base_dir = File::Spec->catpath((File::Spec->splitpath($abs_file))[0,1]);

               # Determine the path to the source file, relative to the target file.
               my $symlink = File::Spec->abs2rel($source, $base_dir);

               # Print information message if in verbose mode.
               print "Symbolic linking \"$file\" to \"$symlink\"...\n" if $opt_v;

               # Create a symbolic link to the source file.
               symlink $symlink, $file or die "$file->$symlink: $!\n";

               # Make sure the target now exists via the symbolic link.
               die "$file: $!\n" unless -e $file;
            }

            # Skip to the next target file.
            next FILE;
         }
      }
   } continue {
      # Remove empty files and directories unless linking duplicates.
      remove_empties $file unless $opt_l or $opt_s;
   }
}

# Remove empty files and directories.
sub remove_empties (@) {
   my @files = @_;

   # Loop across the target files.
   foreach my $file (@files) {
      # Check the type of the file.
      if (-l $file) {
         # Attempt to read the symbolic link.
         my $target = readlink $file or warn "$file: $!\n";

         # Check if the target file exists.
         unless (-e $file) {
            # Print informational message.
            if ($opt_n and $opt_v) {
               print "Would remove broken link \"$file\" -> \"$target\"...\n";
            } elsif ($opt_v) {
               print "Removing broken link \"$file\" -> \"$target\"...\n";
            } else {
               print "$file\n";
            }

            # Remove the broken link.
            unlink $file or warn "$file: $!\n" unless $opt_n;
         }
      } elsif (-d _) {
         # Get the entries from the target directory.
         my @entries = dir_entries "possibly empty", $file;

         # Variables for the empty scan.
         my @empty;
         my $only_empty = 1;

         # Loop across the directory entries.
         foreach my $entry (@entries) {
            # Check the type of the entry.
            if (-l $entry or -d _) {
               # Recurse for symbolic links and subdirectories.
               remove_empties $entry;

               # Clear only-empty flag if recursion didn't remove the entry.
               undef $only_empty if -e $entry;
            } elsif (-f _ and -z _) {
               # Remember the empty files.
               push @empty, $entry;
            } else {
               # Something else found; clear the only-empty flag.
               undef $only_empty;
            }
         }

         # Check if the only-empty flag is still set.
         if ($only_empty) {
            # Loop across the empty files.
            foreach my $empty (@empty) {
               # Print informational message.
               if ($opt_n and $opt_v) {
                  print "Would remove empty file \"$empty\"...\n";
               } elsif ($opt_v) {
                  print "Removing empty file \"$empty\"...\n";
               } else {
                  print "$file\n";
               }

               # Remove the empty file.
               unlink $empty or warn "$empty: $!\n" unless $opt_n;
            }

            # Print informational message.
            if ($opt_n and $opt_v) {
               print "would remove empty directory \"$file\"...\n";
            } elsif ($opt_v) {
               print "removing empty directory \"$file\"...\n";
            } else {
               print "$file\n";
            }

            # Remove the empty directory.
            rmdir $file or warn "$file: $!\n" unless $opt_n;
         }
      }
   }
}

# Subroutine to get the entries of a directory, sorted with subdirectories last.
sub dir_entries ($$) {
   my($type, $dir) = @_;
   my($handle, $entry, @subdir, @entries);

   # Open the directory.
   unless (opendir $handle, $dir) {
      # Print a warning.
      warn "$dir: $!\n";

      # Return nothing.
      return;
   }

   # Print an informational message if in verbose mode.
   print "Scanning $type directory \"$dir\"...\n" if $opt_v;

   # Loop across the directory entries.
   while (defined($entry = readdir $handle)) {
      # Skip "." and ".." directories.
      next if $entry =~ /^\.{1,2}$/;

      # Prefix the directory entry with the directory name.
      $entry = "$dir/$entry";

      # Check for subdirectories.
      if (-l $entry or not -d _) {
         # Not a subdirectory; add it to the list of entries.
         push @entries, $entry;
      } else {
         # Subdirectory; add it to the list of subdirectories.
         push @subdir, $entry;
      }
   }

   # Close the directory.
   closedir $handle;

   # Sort the entries and subdirectories independently.
   @entries = sort @entries;
   @subdir = sort @subdir;

   # Return the entries followed by the subdirectories.
   return @entries, @subdir;
}

# Get the device of the specified file.
sub device ($) {
   my $file = shift;

   # Return cached value if available.
   return $device{$file} if $device{$file};

   # Cache and return the device of the file.
   return ($device{$file} = (lstat $file)[0]);
}

# Get the inode of the specified file.
sub inode ($) {
   my $file = shift;

   # Return cached value if available.
   return $inode{$file} if $inode{$file};

   # Cache and return the inode of the file.
   return ($inode{$file} = (lstat $file)[1]);
}

# Get the size of the specified file.
sub size ($) {
   my $file = shift;

   # Return cached value if available.
   return $size{$file} if exists $size{$file};

   # Get the size of the file.
   $size{$file} = (lstat $file)[7];

   # Keep the size of regular files only.
   delete $size{$file} unless -f _;

   # Return the size of the file.
   return $size{$file};
}

# Get the MD5 checksum of the first block of the specified file.
sub md5 ($) {
   my $file = shift;

   # Return cached value if available.
   return $md5{$file} if $md5{$file};

   # Only checksum regular files.
   return undef unless lstat $file and -f _;

   # Variable for filehandle.
   my $handle;

   # Attempt to open the file.
   unless (open $handle, "<$file\0") {
      # Could not open the file; print a warning.
      warn "$file: $!\n";

      # Could not checksum the file.
      return undef;
   }

   # Read the file in binary mode.
   binmode $handle;

   # Variable for the data buffer.
   my $data;

   # Read only the first block from the file.
   unless (defined sysread $handle, $data, $block_size) {
      # Could not read from the file; print a warning.
      warn "$file: $!\n";

      # Could not checksum the file.
      return undef;
   }

   # Close the file.
   close $handle;

   # Cache and return the checksum of the first block of the file.
   return($md5{$file} = Digest::MD5::md5($data));
}

# Verify whether two files are byte-for-byte identical.
sub identical ($$) {
   my($file1, $file2) = @_;

   # Print information messsage if in verbose mode.
   print "Comparing \"$file1\" with \"$file2\": " if $opt_v;
      
   # Variables for the filehandles.
   my($handle1, $handle2);

   # Catch errors.
   eval {
      # Make sure the files are regular files.
      die "\"$file1\" is not a regular file!\n" if -l $file1 or not -f _;
      die "\"$file2\" is not a regular file!\n" if -l $file2 or not -f _;

      # Make sure the second file is a regular file.
      die "\"$file2\" is not a regular file!\n" unless -f _;

      # Check if both files are the same underlying file.
      die "SAME\n" if device $file1 eq device $file2 and inode $file1 eq inode $file2;

      # Make sure the files are the same size.
      die "File sizes differ!\n" if size $file1 ne size $file2;

      # With -x, skip cross-filesystem comparisons.
      die "Cross-filesystem comparison skipped!\n" if $opt_x and device $file1 ne device $file2;

      # Compare the checksums of the first block of each file.
      die "File checksums differ!\n" if md5 $file1 ne md5 $file2;

      # Open the files.
      open $handle1, "<$file1\0" or die "$file1: $!\n";
      open $handle2, "<$file2\0" or die "$file2: $!\n";

      # Read the files in binary mode.
      binmode $handle1 or die "$file1: $!\n";
      binmode $handle2 or die "$file2: $!\n";

      # Variables for the comparison loop.
      my($bytes1, $bytes2, $data1, $data2) = (1);

      # Compare the file data, byte-for-byte.
      while ($bytes1 > 0) {
         # Read data from the first file.
         defined($bytes1 = sysread $handle1, $data1, $block_size) or die "$file1: $!\n";

         # Read data from the second file.
         defined($bytes2 = sysread $handle2, $data2, $block_size) or die "$file2: $!\n";

         # Make sure the data is identical.
         die "File data differs!\n" unless $data1 eq $data2;
      }

      # Make sure the files contained the same amount of data.
      die "File sizes differ!\n" unless $bytes2 == 0;
   };

   # Close the filehandles.
   close $handle1 or die "$file1: $!\n" if defined $handle1;
   close $handle2 or die "$file2: $!\n" if defined $handle2;

   # Check if this was the same file.
   if ($@ eq "SAME\n") {
      # Print informational message if in verbose mode.
      print "Files are the same exact file.\n" if $opt_v;

      # Return keyword indicating that these are the same file.
      return SAME;
   }

   # Propagate real filesystem errors.
   if ($@ =~ /:/) {
      # Print warning of filesystem error.
      warn $@;

      # Since an error occurred, the files cannot be considered to be identical.
      return undef;
   }

   # Check for file differences.
   if ($@) {
      # Print the error message if in verbose mode.
      print $@ if $opt_v;

      # Files were not identical.
      return undef;
   }

   # Print informational message if in verbose mode.
   print "Files are identical.\n" if $opt_v;

   # These are duplicate files.
   return DUPLICATE;
}
